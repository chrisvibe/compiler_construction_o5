break generate_main 
run < hello
run < hello.vsl 
root
print root
print root->entry
print root
print root*
print *root
print *(*root->children[0])
print **root->children[0]
print *root->children[0]
print (*root->children[0])->children[0]
print *(*root->children[0])->children[0]
print *(*(*root->children[0])->children[0])->n_children[0])
print *(*(*root->children[0])->children[0])->children[0])
print *(*root->children[0])->children[0])
print *(*root->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[1]
print *(*(*root->children[0])->children[0])->children[0]
print *(*root->children[0])->children[0])
print *(*root->children[0])->children[0]
print *(*(*root->children[0])->children[0]->children[0])
print *(*(*root->children[0])->children[0]->children[0]
print *(*(*root->children[0])->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[1]
print *(*(*root->children[0])->children[1])->children[0]
print *(*(*root->children[0])->children[1])
print *(*(*root->children[0])->children[0]
print *(*root->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[0]
print *(*(*root->children[0])->children[1])->children[0]
print *(*(*root->children[0])->children[3])->children[0]
print *(*(*root->children[0])->children[2])->children[0]
print *(*(*root->children[0])->children[0])->children[0]
print *(*(*root->children[0])->children[0])
print *(*(*root->children[0])->children[0]
print *(*root->children[0])->children[0]
print *(*root->children[0])->children[1]
print *(*root->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[0]
print *(*(*root->children[0])->children[0])->children[1]
print *(*(*root->children[0])->children[0])->children[2]
q
break generate_program
run < hello.vsl 
step
n
print root
print *root
print *(*root->children[0])->children[0]
q
run < hello.vsl 
print *node
print *node->children[0]
break generate_main 
run < hello.vsl 
n
step
print *node
print *node->children[0]
print *node
q
break node_tree_to_assembly 
run hello.vsl 
q
break node_tree_to_assembly 
run hello.vsl 
break node_tree_to_assembly 
break generate_function 
run hello.vsl 
run < hello.vsl 
c
n
n
q
break node_tree_to_assembly 
run < hello.vsl 
n
step
n
n
print child
print *child
print *child->children[0]
print *child->children[0]->data
print *(*child->children[0])
print *child->children[0]
print (*child->children[0])->data
print *(*child->children[0])->data
print *node
print *(*node->children[0])
print *node->children[0]
print *node->children[1]
q
break node_tree_to_assembly 
run < hello.vsl 
n
n
step
n
print root
print *root
print print_symbols()
print print_bindings(root, 0)
q
break node_tree_to_assembly 
run < hello.vsl 
n
n
step
n
q
break node_tree_to_assembly 
run < hello.vsl 
n
step
n
break print_node
free node_tree_to_assembly 
help
help breakpoints 
delete node_tree_to_assembly 
breakpoints
help delete
delete breakpoints 
break print_node
run < hello.vsl 
n
n
n
print *((size_t *)node->data)
print (size_t *)node->data
q
break generate_program 
run < test.vsl 
n
step
n
n
n
step
n
run < test.vsl 
c
print *node
print *node->children[0
print *(*node->children[0])
print *node->children[0]
print *node->children[1]
print *node->children[2]
print *node->children[0]
q
run < test.vsl 
q
run < test.vsl 
make pur
make purge
q
break generate_program 
run < test.vsl 
break generate_main 
run < test.vsl 
break generate_program 
run < test.vsl 
ls
q
run < test.vsl 
q
run
q
